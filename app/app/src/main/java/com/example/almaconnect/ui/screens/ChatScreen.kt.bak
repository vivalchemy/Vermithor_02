package com.example.almaconnect.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.Send
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.example.almaconnect.R

data class ChatMessage(
    val content: String,
    val isUserMessage: Boolean,
    val timestamp: String,
    val sender: Sender? = null // Optional sender information
) {
    data class Sender(
        val name: String?,
        val avatarUrl: String?
    )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ChatScreen(
    username: String,
    userIconUrl: String,
    forumTitle: String,
    forumIconUrl: String,
    messages: List<ChatMessage>,
    onSendMessage: (String) -> Unit
) {
    var messageInput by remember { mutableStateOf("") }

    Column(modifier = Modifier.fillMaxSize()) {
        // Top bar with forum title and icon
        TopAppBar(
            title = {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    AsyncImage(
                        model = forumIconUrl,
                        contentDescription = "Forum Icon",
                        modifier = Modifier
                            .size(32.dp)
                            .clip(CircleShape),
                        contentScale = ContentScale.Crop
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(text = forumTitle, fontWeight = FontWeight.Bold)
                }
            },
            colors = TopAppBarDefaults.smallTopAppBarColors(
                containerColor = MaterialTheme.colorScheme.primaryContainer
            )
        )

        // Chat messages
        LazyColumn(
            modifier = Modifier
                .weight(1f)
                .fillMaxWidth()
                .padding(16.dp),
            reverseLayout = true
        ) {
            items(messages.asReversed()) { message ->
                ChatMessageBubble(message)
                Spacer(modifier = Modifier.height(8.dp))
            }
        }

        // Input box and send button
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            TextField(
                value = messageInput,
                onValueChange = { messageInput = it },
                modifier = Modifier.weight(1f),
                placeholder = { Text("Type a message") }
            )
            Spacer(modifier = Modifier.width(8.dp))
            IconButton(
                onClick = {
                    if (messageInput.isNotBlank()) {
                        onSendMessage(messageInput)
                        messageInput = ""
                    }
                }
            ) {
                Icon(Icons.AutoMirrored.Filled.Send, contentDescription = "Send")
            }
        }
    }
}

@Composable
fun ChatMessageBubble(message: ChatMessage) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = if (message.isUserMessage) Alignment.End else Alignment.Start
    ) {
        if (!message.isUserMessage) {
            // Sender info for forum page messages
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.padding(bottom = 4.dp)
            ) {
                AsyncImage(
                    model = message.sender?.avatarUrl?.let { ImageRequest.Builder(LocalContext.current)
                        .data(it)
                        .crossfade(true)
                        .placeholder(R.drawable.baseline_person_24)
                        .error(R.drawable.baseline_person_24)
                        .build() },
                    contentDescription = "Sender Avatar",
                    modifier = Modifier
                        .size(24.dp)
                        .clip(CircleShape),
                    contentScale = ContentScale.Crop
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = message.sender?.name?.let { "$it: " } ?: "",
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }

        Surface(
            color = if (message.isUserMessage) MaterialTheme.colorScheme.primary else Color.LightGray,
            shape = RoundedCornerShape(8.dp)
        ) {
            Column(modifier = Modifier.padding(8.dp)) {
                Text(
                    text = message.content,
                    color = if (message.isUserMessage) Color.White else Color.Black
                )
                Text(
                    text = message.timestamp,
                    fontSize = 12.sp,
                    color = if (message.isUserMessage) Color.White.copy(alpha = 0.7f) else Color.Gray
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun ChatScreenPreview() {
    MaterialTheme {
        ChatScreen(
            username = "John Doe",
            userIconUrl = "https://example.com/avatar.jpg",
            forumTitle = "Forum",
            forumIconUrl = "https://example.com/forum.png",
            messages = listOf(
                ChatMessage("Hello, how are you?", true, "12:00 PM", sender = ChatMessage.Sender("Alice", "https://example.com/alice.jpg")),
                ChatMessage("I'm doing well, thank you!", false, "12:01 PM", sender = ChatMessage.Sender("Bob", "https://example.com/bob.jpg")),
                ChatMessage("I'm fine, thanks again!", true, "12:02 PM", sender = ChatMessage.Sender("Alice", "https://example.com/alice.jpg")),
                ChatMessage("You too!", false, "12:03 PM", sender = ChatMessage.Sender("Bob", "https://example.com/bob.jpg")),
                ChatMessage("Thanks for asking!", true, "12:04 PM", sender = ChatMessage.Sender("Alice", "https://example.com/alice.jpg")),
                ChatMessage("Anytime!", false, "12:05 PM", sender = ChatMessage.Sender("Bob", "https://example.com/bob.jpg")),
                ChatMessage("See you soon!", true, "12:06 PM", sender = ChatMessage.Sender("Alice", "https://example.com/alice.jpg")),
                ChatMessage("See you soon!", false, "12:06 PM", sender = ChatMessage.Sender("Next", "https://example.com/alice.jpg"))
            ),
            onSendMessage = { /* Handle send message logic */ }
        )
    }
}